[main]
authc.loginUrl = /login.xhtml
user.loginUrl = /login.xhtml
roles.loginUrl = /login.xhtml
perms.loginUrl = /login.xhtml

# Create JDBC realm.
jdbcRealm = org.application.service.security.JdbcSaltRealm
datasource = org.apache.shiro.jndi.JndiObjectFactory
datasource.resourceName = java:comp/DefaultDataSource
# if the JNDI name is prefixed with java:comp/env (like a JEE environment),
# uncomment this line:
# datasource.resourceRef = true

jdbcRealm.dataSource = $datasource 

# Configure JDBC realm SQL queries.
jdbcRealm.authenticationQuery = SELECT password, salt FROM Users WHERE username = ? and status = 'Active'
jdbcRealm.userRolesQuery = SELECT user_role FROM USER_ROLES WHERE user_Id = (SELECT id FROM USERS WHERE username = ?)

# Configure JDBC realm password hashing.
credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName = SHA-512
# Base64 encoding (less text):
# credentialsMatcher.storedCredentialsHexEncoded = false
jdbcRealm.credentialsMatcher = $credentialsMatcher
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.permissionsQuery = SELECT permission FROM ROLE_PERMISSIONS where user_role = ?

jdbcRealm.authorizationCachingEnabled = false

[urls]

# Avoid direct access to include files
/**/*Include.xhtml = perms["none"]

/pages/productExample/productExample.xhtml = anon

/pages/productExample/productExampleView.xhtml = anon

/pages/productExample/productExampleCreate.xhtml = anon

/pages/productExample/productExampleEdit.xhtml = anon

/pages/division/division.xhtml = perms["division:read"]

/pages/division/divisionView.xhtml = perms["division:read"]

/pages/division/divisionCreate.xhtml = perms["division:create"]

/pages/division/divisionEdit.xhtml = perms["division:update"]

/pages/memoFees/memoFees.xhtml = perms["memoFees:read"]

/pages/memoFees/memoFeesView.xhtml = perms["memoFees:read"]

/pages/memoFees/memoFeesCreate.xhtml = perms["memoFees:create"]

/pages/memoFees/memoFeesEdit.xhtml = perms["memoFees:update"]

# admin pages only for Administrators
/pages/admin/** = roles["Administrator"]

# what anomymous users can do
/login.xhtml = authc
/pages/main.xhtml = anon
/pages/user/activation.xhtml = anon
/pages/userManagement/resetPassword.xhtml = anon

# all other pages are available for authenticated users, only
/pages/** = authc
